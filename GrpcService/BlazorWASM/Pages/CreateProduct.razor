@page "/CreateProduct"
@using global::Shared.DTOs
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using System.Net.Http.Headers
@inject IWarehouseService WarehouseService
@inject HttpClient httpClient

<PageTitle>Create Product</PageTitle>

@attribute [Authorize("MustBeAdmin")]
<div class="col d-flex justify-content-center">
    <div class="card" style="width: 50rem">
        <h5 class="card-header text-center">Add new product to catalogue</h5>
        <div class="card-body">
            <div class="form-group">
                <label for="productName">Product name</label>
                <input id="productName" type="text" class="form-control" @bind="productName" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </div>
            <div class="form-group" style="margin-top: 1rem">
                <label for="ean">EAN</label>
                <input id="ean" type="text" class="form-control" @bind="ean" @bind:event="oninput"/>
                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </div>
            <div class="form-group" style="margin-top: 1rem">
                <label for="fileInput">Wanna upload an image?</label>
                <br/>
                <InputFile type="file" accept="image/*" OnChange="@OnInputFileChange"></InputFile>
            </div>
        </div>
        <div class="card-footer text-center">
            <button @onclick="Create" disabled="@(string.IsNullOrEmpty(productName) || ean==0)" class="btn btn-primary text-center">Create</button>
        </div>
    </div>
    
</div>

@code {
    private long ean;
    private string productName = "";
    private int stock;
    private string photoPath = "";
    private List<string> location = new List<string>();
    private string resultMsg = "";
    private string color = "";
    private int maxAllowedFiles = 1;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            await WarehouseService.CreateProductAsync(new ProductCreationDto(ean, productName, stock, photoPath, location));
            ean = 0;
            productName = "";
            photoPath = "";
            resultMsg = "Product successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            
            fileNames.Add(file.Name);
            
            content.Add(content: fileContent, name:"\"files\"", fileName:file.Name);
            photoPath = file.Name;
        }
        var response = await httpClient.PostAsync("/File", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
    }
}