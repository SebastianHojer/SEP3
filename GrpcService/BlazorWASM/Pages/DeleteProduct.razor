@page "/DeleteProduct"
@using HttpClients.ClientInterfaces
@using global::Shared.Models
@inject IWarehouseService WarehouseService;

@attribute [Authorize("MustBeAdmin")]
<h3>DeleteProduct</h3>
@if (products == null)
{
  <div class="col d-flex justify-content-center">
  <div class="loader"></div>
  </div>
}
else if (!products.Any())
{
    <span>No products to be found</span>
}
else
{
@foreach (var product in products)
{
  <div class="card">
    <img class="card-img-top" src="Images/@product.PhotoPath" alt="Card image cap">
    <div class="card-body">
      <h5 class="card-title text-truncate">@product.ProductName</h5>
      <ul class="list-group list-group-flush">
        <li class="list-group-item text-truncate"><strong>Antal på lager: </strong>@product.Stock </li>
        <li class="list-group-item text-truncate"><strong>EAN: </strong>@product.Ean </li>
        <li class="list-group-item text-truncate"><strong>Information: </strong><br/>@product.PhotoPath</li>
      </ul>
      <button class="btn btn-primary" @onclick="@(() => DeleteAndRefresh(product))">Delete Product</button>
    </div>
  </div>
}
}
<div class="col d-flex justify-content-center">
<button class="btn btn-primary" style="margin-bottom: 2rem" @onclick="@(() => PopulateProducts())"> Refresh </button>
</div>
@if (!string.IsNullOrEmpty(resultMsg))
{
    <div>
        <span>@resultMsg</span>
    </div>
}
@code {
  private IEnumerable<Product>? products;

  private int amount;
  private string EAN;
  private string location;
  private string resultMsg = "";

  private string color = "";

  private async Task Delete(Product product)
  {
    resultMsg = "";

    try
    {
      await WarehouseService.DeleteAsync(product);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
      color = "red";
    }
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      products = await WarehouseService.RetrieveAsync(null);
      Console.WriteLine("Retrieved Products");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }

  private async Task PopulateProducts()
  {
    resultMsg = "";
    try
    {
      products = await WarehouseService.RetrieveAsync(null);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
      color = "red";
    }
  }

  private async Task DeleteAndRefresh(Product product)
  {
    try
    {
      await Delete(product);
      products = await WarehouseService.RetrieveAsync(null);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
}
