@page "/DeleteUser"
@using HttpClients.ClientInterfaces
@inject IUserService userService;

<PageTitle>Delete User</PageTitle>

@attribute [Authorize("MustBeAdmin")]
<div class="col d-flex justify-content-center">
<button class="btn btn-primary text-center" @onclick="@(() => RetrieveUsers())"> Refresh </button>
</div>
<hr/>
@if (!string.IsNullOrEmpty(resultMsg))
{
    <div>
        <span>@resultMsg</span>
    </div>
}

@if (usernames == null)
{
    <div class="col d-flex justify-content-center">
      <div class="loader"></div>
      </div>
}
else if (!usernames.Any())
{
    <span>No users to be found</span>
}
else
{
    <div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Username</th>
            <th scope="col">Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var username in usernames)
        {
            <tr>
                <td>@username</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(() => DeleteAndRefresh(username))"> Delete </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </div>
}

@code {
    private List<string> usernames;
    private string password = "";
    private bool isAdmin = false;
    private string resultMsg = "";
    private string color = "";
    
    private async Task Delete(string username)
    {
        resultMsg = "";

        try
        {
            await userService.Delete(username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
    protected override async Task OnInitializedAsync() {
        try
        {
           usernames = await userService.Retrieve();
        }
        catch (Exception e) {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }
    private async Task RetrieveUsers()
    {
        resultMsg = "";
        try
        {
            usernames = await userService.Retrieve();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

    private async Task DeleteAndRefresh(string username)
    {

        try
        {
            await Delete(username);
            usernames = await userService.Retrieve();
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }
}