@page "/EditProduct/{ean:long}"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using BlazorWASM.Pages.UIComponents
@using global::Shared.DTOs
@inject IWarehouseService WarehouseService

@if (product == null)
{
  <div class="col d-flex justify-content-center">
  <div class="loader"></div>
  </div>
}
else if (!product.Any())
{
    <span>No products to be found</span>
}
else
{
@foreach (var product in product)
{
  amount = product.Stock;
  ProductName = product.ProductName;
  location = String.Join(",", product.Location);
  <div class="card" style = "width: 18rem; display: inline-block">
    <img class="card-img-top" style="width: 100%; height: 15vw" src="Images/@product.PhotoPath" onerror="this.onerror=null; this.src='Images/Default.png'" alt="Card image cap">
    <div class="card-body">
      <form action="/action_page.php">
        <ul class="list-group list-group-flush">
          <li class="list-group-item text-truncate"><strong>EAN: </strong> @product.Ean </li>
          <li class="list-group-item text-truncate"><strong>@product.ProductName</strong></li>
          <input type="text" id="ProductName" name="ProductName" placeholder="Product name" @bind="ProductName"><br><br>
          <li class="list-group-item text-truncate"><strong>Location: </strong>@location </li>
          <input type="text" id="Locations" name="Locations" placeholder="Locations" @bind="location"><br><br>
          <li class="list-group-item text-truncate"><strong>Antal på lager: </strong>@product.Stock </li>
          <input type="text" id="Stock" name="Stock" placeholder="@amount" @bind="amount"><br><br>
        </ul>
      </form>
      <button @onclick="@(() => EditProducts(product.Ean))">Edit</button>
      <Modal ShowModal="showModal">
        <form action="/action_page.php">
          <label for="ProductName">Product Name:</label>
          <input type="text" id="ProductName" name="ProductName" @bind="ProductName"><br><br>
          <label for="Stock">Stock:</label>
          <input type="text" id="Stock" name="Stock" @bind="amount"><br><br>
          <label for="ProductName">Location:</label>
          <input type="text" id="Locations" name="Locations" @bind="location"><br><br>
        </form>
        <button @onclick="@(() => EditProducts(product.Ean))">Edit</button>
      </Modal>
    </div>
  </div>
}
}
@if (!string.IsNullOrEmpty(resultMsg))
{
  <div>
    <span>@resultMsg</span>
  </div>
}
@code 
{
  [Parameter]
  public long ean { get; set; }
  
  private bool showModal;
  private IEnumerable<Product> product;
  private string? ProductName;
  private int? amount;
  private string photoPath;
  private string location;
  private string resultMsg = "";
/*
 @locationtemp = @ToString(product.Location);
          <input type="text" id="Locations" name="Locations" @bind="locationtemp"><br><br>
          <input type="submit" value="Submit">
          @product.Location = @toList(locationtemp);
          @location = @product.Location; */
  private string color = "";
  
  
  protected override async Task OnInitializedAsync()
  {
    try
    {
      product = await WarehouseService.RetrieveAsync(ean);
      Console.WriteLine("Retrieved Products");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
  

  private IEnumerable<string> ToList(string locations)
  {
    string[] locationStrings = locations.Split(",");
    IEnumerable<string> strings = locationStrings.ToList();
    return strings;
  }
  
  private async Task BeginEditing()
  {
    resultMsg = "";
    try
    {
      await WarehouseService.RetrieveAsync(ean);
        showModal = true;
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
  private async Task EditProducts(long ean)
  {
    resultMsg = "";
    try
    {
      WarehouseUpdateDto dto = new WarehouseUpdateDto(ean)
      {
        locations = ToList(location),
        Ean = ean,
        PhotoPath = photoPath,
        Stock = amount,
        ProductName = ProductName
      };
      showModal = false;
      Console.WriteLine("ViewProducts: " + " EAN: " + dto.Ean + " photoPath = " + dto.PhotoPath + " Stock: " + dto.Stock + " Locations: " + dto.locations.ToString() + " name: " + dto.ProductName);
      await WarehouseService.UpdateAsync(dto);
      await WarehouseService.RetrieveAsync(ean);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
}