@page "/ViewProducts"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using BlazorWASM.Pages.UIComponents
@using global::Shared.DTOs
@inject IWarehouseService WarehouseService
<PageTitle>View Products</PageTitle>
<h3>View Products</h3>

@if (products == null)
{
  <div class="col d-flex justify-content-center">
  <div class="loader"></div>
  </div>
}
else if (!products.Any())
{
    <span>No products to be found</span>
}
else
{
@foreach (var product in products)
{
  <div class="card">
    <img class="card-img-top" src="Images/@product.PhotoPath" onerror="this.onerror=null; this.src='Images/Default.png'" alt="Card image cap">
    <div class="card-body">
      <h5 class="card-title text-truncate">@product.ProductName</h5>
      <ul class="list-group list-group-flush">
         <li class="list-group-item text-truncate"><strong>Location: </strong>@product.Location.ToString() </li>
        <li class="list-group-item text-truncate"><strong>Antal p√• lager: </strong>@product.Stock </li>
        <li class="list-group-item text-truncate"><strong>EAN: </strong> @product.Ean </li>
        <li class="list-group-item text-truncate"><strong>Information: </strong><br/>@product.PhotoPath</li>
      </ul>
       <button @onclick="@(() => BeginEditing(product.Ean))">Edit</button>
      <Modal ShowModal="showModal">
        <form action="/action_page.php">
          <label for="ProductName">Product Name:</label>
          <input type="text" id="ProductName" name="ProductName" @bind="ProductName"><br><br>
          <label for="Stock">Stock:</label>
          <input type="text" id="Stock" name="Stock" @bind="amount"><br><br>
          <label for="ProductName">Location:</label>
          <input type="text" id="Locations" name="Locations" @bind="locationtemp"><br><br>
          <input type="submit" value="Submit">
        </form>
        <button @onclick="@(() => EditProduct(product.Ean))">Edit</button>
      </Modal>
    </div>
  </div>
}
}
<div class="col d-flex justify-content-center">
    <button class="btn btn-primary" style="margin-bottom: 2rem" @onclick="@(() => PopulateProducts())"> Refresh </button>
  </div>
@if (!string.IsNullOrEmpty(resultMsg))
{
  <div>
    <span>@resultMsg</span>
  </div>
}
@code {
  private bool showModal;
  private IEnumerable<Product>? products;
  private string ProductName;
  private int amount;
  private string photoPath;
  private long ean;
  private string locationtemp;
  private List<string> location;
  private string resultMsg = "";
/*
 @locationtemp = @ToString(product.Location);
          <input type="text" id="Locations" name="Locations" @bind="locationtemp"><br><br>
          <input type="submit" value="Submit">
          @product.Location = @toList(locationtemp);
          @location = @product.Location; */
  private string color = "";
  
  
  protected override async Task OnInitializedAsync()
  {
    try
    {
      products = await WarehouseService.RetrieveAsync(null);
      Console.WriteLine("Retrieved Products");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }

  private string ToString(List<string> locations)
  {
    string toReturn = String.Join(", ", locations);
    return toReturn;
  }

  private IEnumerable<string> ToList(string locations)
  {
    string[] locationStrings = locations.Split(",");
    IEnumerable<string> strings = locationStrings.ToList();
    return strings;
  }
  
  private async Task BeginEditing(long ean)
  {
    resultMsg = "";
    try
    {
      await WarehouseService.RetrieveAsync(ean);
        showModal = true;
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
  private async Task EditProduct(long ean)
  {
    resultMsg = "";
    try
    {
      WarehouseUpdateDto dto = new WarehouseUpdateDto(ean)
      {
        locations = ToList(locationtemp),
        Ean = ean,
        PhotoPath = photoPath,
        Stock = amount,
        ProductName = ProductName
      };
      showModal = false;
      Console.WriteLine("ViewProducts: " + " EAN: " + dto.Ean + " photoPath = " + dto.PhotoPath + " Stock: " + dto.Stock + " Locations: " + dto.locations.ToString() + " name: " + dto.ProductName);
      await WarehouseService.UpdateAsync(dto);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
    }
  }
  private async Task PopulateProducts()
  {
    resultMsg = "";
    try
    {
      products = await WarehouseService.RetrieveAsync(null);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      resultMsg = e.Message;
      color = "red";
    }
  }
}